import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

const GenericTable2 = ({
  columnDefs = [],
  rowData = [],
  paginationPageSize = 20,
  serverSide = false,
  apiUrl = '',
  fetchDataParams = {},
  onGridReady = () => {},
}) => {
  const [gridApi, setGridApi] = useState(null);
  const [gridColumnApi, setGridColumnApi] = useState(null);

  // Server-side data fetching logic (if needed)
  const fetchServerData = async (params) => {
    if (!apiUrl) return;
    try {
      const response = await axios.get(apiUrl, {
        params: {
          page: params.start / params.end + 1,  // Page number for pagination
          pageSize: params.end - params.start,  // Page size
          ...fetchDataParams,
          sortBy: params.sortModel.length > 0 ? params.sortModel[0].colId : '',
          sortOrder: params.sortModel.length > 0 ? params.sortModel[0].sort : '',
          filter: params.filterModel
        }
      });
      const { data, totalCount } = response.data;  // Assuming API returns this structure
      params.successCallback(data, totalCount);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    if (serverSide && gridApi) {
      gridApi.setDatasource({
        getRows: (params) => fetchServerData(params),
      });
    }
  }, [serverSide, gridApi]);

  const onGridReadyHandler = (params) => {
    setGridApi(params.api);
    setGridColumnApi(params.columnApi);
    onGridReady(params);
  };

  return (
    <div className="ag-theme-alpine" style={{ height: '400px', width: '100%' }}>
      <AgGridReact
        onGridReady={onGridReadyHandler}
        columnDefs={columnDefs}  // Directly using columnDefs passed from the parent
        rowData={rowData}
        paginationPageSize={paginationPageSize}
        pagination={true}
        enableSorting={true}
        enableFilter={true}
        domLayout="autoHeight"
        rowModelType={serverSide ? 'serverSide' : 'clientSide'}
        rowSelection={false}  // No row selection (checkboxes)
      />
    </div>
  );
};

// Prop validation with PropTypes
GenericTable2.propTypes = {
  columnDefs: PropTypes.array.isRequired,
  rowData: PropTypes.array.isRequired,
  paginationPageSize: PropTypes.number,
  serverSide: PropTypes.bool,
  apiUrl: PropTypes.string,
  fetchDataParams: PropTypes.object,
  onGridReady: PropTypes.func,
};

export default GenericTable2;




import React, { useEffect, useState } from 'react';
import GenericTable2 from './GenericTable2';

const CustomButtonComponent = (props) => {
  return <button onClick={() => window.alert('clicked')}>Push Me!</button>;
};

const ParentComponent = () => {
  const [staticData, setStaticData] = useState([]);
  const [columnDefs, setColumnDefs] = useState([]);

  // Define column definitions for all use cases
  useEffect(() => {
    setColumnDefs([
      { field: 'button', cellRenderer: CustomButtonComponent, flex: 1 },
      { headerName: 'ID', field: 'id' },
      { headerName: 'Name', field: 'name' },
      { headerName: 'Age', field: 'age' },
      { headerName: 'Country', field: 'country' },
    ]);
  }, []);

  // Static data for Basic Table
  useEffect(() => {
    const data = [
      { id: 1, name: 'John Doe', age: 25, country: 'USA' },
      { id: 2, name: 'Jane Smith', age: 30, country: 'UK' },
      { id: 3, name: 'Sandy Johnson', age: 28, country: 'Canada' },
      { id: 4, name: 'Chris Evans', age: 35, country: 'Australia' },
    ];
    setStaticData(data);
  }, []);

  return (
    <div>
      <h2>AG Grid with Static Actions Column</h2>
      <GenericTable2
        columnDefs={columnDefs}
        rowData={staticData}
        paginationPageSize={5}
      />
    </div>
  );
};

export default ParentComponent;
