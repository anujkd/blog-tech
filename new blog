// Mapping from Excel column names (display) to internal column names
const columnMapping = {
  "First Name": "firstName",
  "Last Name": "lastName",
  "Gender": "Gender",
  "Country": "CountryName",
  "Age": "Age",
  "Date": "Date",
  "Id": "Id"
};

const mapColumnsToInternal = (data) => {
  return data.map(row => {
    const mappedRow = {};
    Object.keys(row).forEach(excelColumn => {
      // Check if there's a mapping for the column
      const internalColumn = columnMapping[excelColumn];
      if (internalColumn) {
        mappedRow[internalColumn] = row[excelColumn]; // Replace with internal column name
      } else {
        mappedRow[excelColumn] = row[excelColumn]; // Keep original if no mapping exists
      }
    });
    return mappedRow;
  });
};

// Usage of the mapColumnsToInternal function
const parseExcelFile = (uploadedFile) => {
  const reader = new FileReader();

  reader.onload = (e) => {
    const data = e.target.result;
    const workbook = XLSX.read(data, { type: 'array' }); // Handle ArrayBuffer
    const sheetName = workbook.SheetNames[0]; // First sheet
    const sheet = workbook.Sheets[sheetName];

    // Parse the rows into JSON
    const jsonData = XLSX.utils.sheet_to_json(sheet);

    if (jsonData.length === 0) {
      setFileError('The file is empty or invalid.');
      return;
    }

    // Map columns to internal names
    const mappedData = mapColumnsToInternal(jsonData);
    setFileData(mappedData); // Set the data with internal column names

    // Set the column definitions based on internal names
    const columns = Object.keys(mappedData[0]).map((key) => ({
      headerName: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize header
      field: key,
      sortable: true,
      filter: true,
    }));
    setColumnDefs(columns);

    // Proceed to next step
    setStep(2);
  };

  // Read the file as ArrayBuffer
  reader.readAsArrayBuffer(uploadedFile);
};

const mapColumnsToInternal = (data) => {
  return data.map(row => {
    const mappedRow = {};
    Object.keys(row).forEach(excelColumn => {
      // Check if there's a mapping for the column
      const internalColumn = columnMapping[excelColumn];
      if (internalColumn) {
        mappedRow[internalColumn] = row[excelColumn]; // Replace with internal column name
      }
    });
    return mappedRow; // Return row with only internal columns
  });
};
