// src/services/authInterceptor.js

import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'https://api.example.com';

// Create axios instance
const axiosInstance = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Variables to track token refresh state
let isRefreshing = false;
let refreshSubscribers = [];

// Function to add callbacks to the queue
const subscribeToTokenRefresh = (callback) => {
  refreshSubscribers.push(callback);
};

// Function to call all the callbacks with the new token
const onTokenRefreshed = (newToken) => {
  refreshSubscribers.forEach((callback) => callback(newToken));
  refreshSubscribers = [];
};

// Function to handle token refresh
const refreshToken = async () => {
  try {
    const refreshToken = localStorage.getItem('refreshToken');
    if (!refreshToken) {
      // No refresh token available, user needs to log in
      localStorage.clear();
      window.location.href = '/login';
      return null;
    }

    const response = await axios.post(`${API_URL}/auth/refresh-token`, {
      refreshToken,
    });

    const { accessToken, expiresIn } = response.data;
    
    // Save the new token and its expiration time
    localStorage.setItem('accessToken', accessToken);
    const expirationTime = new Date().getTime() + expiresIn * 1000;
    localStorage.setItem('tokenExpiration', expirationTime);
    
    return accessToken;
  } catch (error) {
    console.error('Error refreshing token:', error);
    // Refresh token failed, redirect to login
    localStorage.clear();
    window.location.href = '/login';
    return null;
  }
};

// Function to check if token is expired
const isTokenExpired = () => {
  const expirationTime = localStorage.getItem('tokenExpiration');
  if (!expirationTime) return true;
  
  // Add a buffer of 10 seconds to refresh the token slightly before it actually expires
  return new Date().getTime() > (parseInt(expirationTime) - 10000);
};

// Request interceptor
axiosInstance.interceptors.request.use(
  async (config) => {
    // Skip token for login or refresh token endpoints
    if (config.url.includes('/auth/login') || config.url.includes('/auth/refresh-token')) {
      return config;
    }

    // Check if token needs to be refreshed
    if (isTokenExpired()) {
      // If we're not already refreshing, start the refresh process
      if (!isRefreshing) {
        isRefreshing = true;
        
        const newToken = await refreshToken();
        
        isRefreshing = false;
        
        if (newToken) {
          onTokenRefreshed(newToken);
        }
      }
      
      // Add this request to the queue to be executed after token refresh
      if (isRefreshing) {
        return new Promise((resolve) => {
          subscribeToTokenRefresh((newToken) => {
            config.headers.Authorization = `Bearer ${newToken}`;
            resolve(config);
          });
        });
      }
    }
    
    // Add token to headers for authenticated requests
    const accessToken = localStorage.getItem('accessToken');
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }
    
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor to handle 401 Unauthorized errors
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    
    // If the error is 401 and we haven't retried yet
    if (error.response?.status === 401 && !originalRequest._retry) {
      if (isRefreshing) {
        // Wait for the token refresh to complete
        return new Promise((resolve) => {
          subscribeToTokenRefresh((newToken) => {
            originalRequest.headers.Authorization = `Bearer ${newToken}`;
            originalRequest._retry = true;
            resolve(axiosInstance(originalRequest));
          });
        });
      } else {
        // Start refreshing the token
        originalRequest._retry = true;
        isRefreshing = true;
        
        try {
          const newToken = await refreshToken();
          isRefreshing = false;
          
          if (newToken) {
            // Update headers and notify subscribers
            originalRequest.headers.Authorization = `Bearer ${newToken}`;
            onTokenRefreshed(newToken);
            
            // Retry the original request with the new token
            return axiosInstance(originalRequest);
          }
        } catch (refreshError) {
          isRefreshing = false;
          return Promise.reject(refreshError);
        }
      }
    }
    
    return Promise.reject(error);
  }
);

export default axiosInstance;