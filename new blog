root/
â”œâ”€â”€ public/
â”‚   â””â”€â”€ env.js          # <- runtime env file (will be replaced dynamically)
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ config/
â”‚   â”‚   â””â”€â”€ env.js      # <- env loader (supports both vite dev and runtime)
â”‚   â”œâ”€â”€ context/
â”‚   â”‚   â””â”€â”€ EnvContext.jsx # <- React context for env (optional but clean)
â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â””â”€â”€ apiClient.js   # <- Axios client using dynamic base URL
â”‚   â”œâ”€â”€ App.jsx
â”‚   â”œâ”€â”€ main.jsx
â”œâ”€â”€ .env
â”œâ”€â”€ .env.production
â”œâ”€â”€ vite.config.js
â”œâ”€â”€ package.json
â”œâ”€â”€ Dockerfile
â””â”€â”€ nginx.conf


// public/env.js

window._env_ = {
  REACT_APP_API_URL: "https://api.production.com",
  REACT_APP_AUTH_URL: "https://auth.production.com",
  CONFIG_VERSION: "2025-04-21-01",
};


// src/config/env.js

const getEnvVar = (key, fallback = undefined) => {
  if (typeof window !== "undefined" && window._env_ && window._env_[key]) {
    return window._env_[key];
  }
  if (import.meta.env && import.meta.env[key]) {
    return import.meta.env[key];
  }
  return fallback;
};

export const ENV = {
  API_URL: getEnvVar('REACT_APP_API_URL'),
  AUTH_URL: getEnvVar('REACT_APP_AUTH_URL'),
  CONFIG_VERSION: getEnvVar('CONFIG_VERSION', 'unknown'),
};

export default ENV;



// src/api/apiClient.js

import axios from 'axios';
import { ENV } from '../config/env';

const apiClient = axios.create({
  baseURL: ENV.API_URL,
  timeout: 10000,
});

export default apiClient;




// src/context/EnvContext.jsx

import { createContext, useContext } from 'react';
import { ENV } from '../config/env';

const EnvContext = createContext(ENV);

export const useEnv = () => useContext(EnvContext);

export const EnvProvider = ({ children }) => {
  return (
    <EnvContext.Provider value={ENV}>
      {children}
    </EnvContext.Provider>
  );
};




// src/main.jsx

import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

async function bootstrapApp() {
  if (import.meta.env.PROD) {
    await loadEnvScript();
  }
  createRoot(document.getElementById('root')).render(<App />);
}

function loadEnvScript() {
  return new Promise((resolve, reject) => {
    const script = document.createElement('script');
    script.src = '/env.js?v=' + Date.now(); // bust cache
    script.onload = resolve;
    script.onerror = reject;
    document.head.appendChild(script);
  });
}

bootstrapApp();


import { EnvProvider } from './context/EnvContext';

function App() {
  return (
    <EnvProvider>
      <div>Hello Dynamic Environment Setup!</div>
    </EnvProvider>
  );
}

export default App;


# Dockerfile

FROM node:18-alpine as builder
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
COPY public/env.js /usr/share/nginx/html/env.js


# nginx.conf

server {
  listen 80;
  server_name _;

  location / {
    root   /usr/share/nginx/html;
    index  index.html;
    try_files $uri $uri/ /index.html;
  }

  location /env.js {
    root /usr/share/nginx/html;
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
  }
}

ðŸ§  Kubernetes ConfigMap or Docker volume for env.js (dynamic injection)

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-app-env
data:
  env.js: |
    window._env_ = {
      REACT_APP_API_URL: "https://api.staging.com",
      REACT_APP_AUTH_URL: "https://auth.staging.com",
      CONFIG_VERSION: "staging-2025",
    };





------------------------------------



# Step 1: Use the base node image to build your app
FROM node:18-alpine as builder
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Step 2: Use nginx for serving the app
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf

# Step 3: Add the dynamic env.js generation during container start
COPY ./public/env.js.template /usr/share/nginx/html/env.js.template

# Inject the environment variables into env.js at container start
CMD envsubst < /usr/share/nginx/html/env.js.template > /usr/share/nginx/html/env.js && nginx -g "daemon off;"



window._env_ = {
  REACT_APP_API_URL: "${REACT_APP_API_URL}",
  REACT_APP_AUTH_URL: "${REACT_APP_AUTH_URL}",
  CONFIG_VERSION: "${CONFIG_VERSION}",
};



import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

async function bootstrapApp() {
  if (import.meta.env.PROD) {
    await loadEnvScript();
  }
  createRoot(document.getElementById('root')).render(<App />);
}

function loadEnvScript() {
  return new Promise((resolve, reject) => {
    const script = document.createElement('script');
    script.src = '/env.js?v=' + Date.now(); // Cache busting
    script.onload = resolve;
    script.onerror = reject;
    document.head.appendChild(script);
  });
}

bootstrapApp();



const getEnvVar = (key, fallback = undefined) => {
  if (typeof window !== "undefined" && window._env_ && window._env_[key]) {
    return window._env_[key];
  }
  if (import.meta.env && import.meta.env[key]) {
    return import.meta.env[key];
  }
  return fallback;
};

export const ENV = {
  API_URL: getEnvVar('REACT_APP_API_URL'),
  AUTH_URL: getEnvVar('REACT_APP_AUTH_URL'),
  CONFIG_VERSION: getEnvVar('CONFIG_VERSION', 'unknown'),
};

export default ENV;


import axios from 'axios';
import { ENV } from '../config/env';

const apiClient = axios.create({
  baseURL: ENV.API_URL,
  timeout: 10000,
});

export default apiClient;


server {
  listen 80;
  server_name _;

  location / {
    root   /usr/share/nginx/html;
    index  index.html;
    try_files $uri $uri/ /index.html;
  }

  location /env.js {
    root /usr/share/nginx/html;
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
  }
}


docker build -t react-vite-env .


docker run -p 80:80 -e REACT_APP_API_URL=https://api.example.com -e REACT_APP_AUTH_URL=https://auth.example.com react-vite-env





