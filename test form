// Basic usage
<GenericTable
  columnDefs={columnDefs}
  rowData={staticData}
/>

// Advanced usage with customization
<GenericTable
  columnDefs={columnDefs}
  serverSide={true}
  apiUrl="/api/data"
  gridHeight="600px"
  enableExport={true}
  customLoadingOverlay={<CustomLoader />}
  axiosConfig={{
    headers: {
      'Authorization': 'Bearer token'
    }
  }}
  onError={(error) => console.error('Grid error:', error)}
  customGridOptions={{
    rowSelection: 'multiple',
    animateRows: true
  }}
/>



function YourComponent() {
  const { showSnackbar } = useSnackbar();

  const handleSomeAction = () => {
    // Show success message
    showSnackbar('Action completed!', 'success');

    // Show error with custom configuration
    showSnackbar('Something went wrong', 'error', {
      variant: 'outlined',
      anchorOrigin: { vertical: 'bottom', horizontal: 'right' }
    });
  };

  return (
    // Your component JSX
    <ConfigurableSnackbar
      open={snackbarState.open}
      onClose={hideSnackbar}
      message={snackbarState.message}
      severity={snackbarState.severity}
    />
  );
}



import React, { useState, useCallback, useRef, useMemo } from 'react';
import PropTypes from 'prop-types';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';

const GenericTable12 = ({
  columnDefs,
  rowData = [],
  paginationPageSize = 20,
  serverSide = false,
  apiUrl = '',
  fetchDataParams = {},
  onGridReady = () => {},
  onError = () => {},
  gridTheme = 'ag-theme-alpine',
  gridHeight = '500px',
  gridWidth = '100%',
  customLoadingOverlay,
  axiosConfig = {},
  defaultColDef = {},
  enableExport = false,
  noRowsMessage = 'No rows to show',
  loadingMessage = 'Loading data...',
  customGridOptions = {},
  onDataLoaded = () => {},
  autoRefreshInterval = 0, // Add auto-refresh interval in milliseconds (0 to disable)
}) => {
  const gridRef = useRef(null);
  const totalRowsRef = useRef(0);
  const currentPageSizeRef = useRef(paginationPageSize);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isDataLoaded, setIsDataLoaded] = useState(false);
  const autoRefreshIntervalRef = useRef(null);

  // Handle API errors
  const handleError = useCallback((err) => {
    const errorMessage = err?.response?.data?.message || err.message || 'An error occurred';
    setError({ message: errorMessage, timestamp: new Date() });
    onError(err);
    setLoading(false);
  }, [onError]);

  // Refresh data function
  const refreshData = useCallback(async () => {
    if (!gridRef.current?.api || loading) return;

    setLoading(true);
    
    try {
      if (serverSide) {
        // For server-side, refresh current page
        const currentPage = gridRef.current.api.paginationGetCurrentPage();
        const dataSource = createDataSource(currentPageSizeRef.current);
        
        await new Promise((resolve, reject) => {
          dataSource.getRows({
            startRow: currentPage * currentPageSizeRef.current,
            successCallback: (rows, totalRows) => {
              gridRef.current.api.setRowData(rows);
              totalRowsRef.current = totalRows;
              setIsDataLoaded(true);
              onDataLoaded(rows);
              resolve();
            },
            failCallback: reject,
          });
        });
      } else {
        // For client-side, fetch all data
        const response = await axios.get(apiUrl, {
          params: fetchDataParams,
          ...axiosConfig
        });
        
        const newData = response.data.content || response.data;
        gridRef.current.api.setRowData(newData);
        totalRowsRef.current = newData.length;
        setIsDataLoaded(true);
        onDataLoaded(newData);
      }
    } catch (err) {
      handleError(err);
    } finally {
      setLoading(false);
    }
  }, [serverSide, apiUrl, fetchDataParams, axiosConfig, loading, handleError, onDataLoaded, createDataSource]);

  // Setup auto-refresh
  useEffect(() => {
    if (autoRefreshInterval > 0) {
      autoRefreshIntervalRef.current = setInterval(refreshData, autoRefreshInterval);
    }
    
    return () => {
      if (autoRefreshIntervalRef.current) {
        clearInterval(autoRefreshIntervalRef.current);
      }
    };
  }, [autoRefreshInterval, refreshData]);

  // Rest of the component remains the same until the return statement

  return (
    <div className="flex flex-col gap-4">
      <div className="flex justify-between items-center">
        <div className="text-sm text-gray-500">
          {loading ? 'Loading...' : `Total rows: ${totalRowsRef.current}`}
        </div>
        <div className="flex gap-2">
          <button
            onClick={refreshData}
            disabled={loading}
            className={`px-4 py-2 rounded transition-colors ${
              loading ? 'bg-gray-300 cursor-not-allowed' : 'bg-green-500 hover:bg-green-600 text-white'
            }`}
          >
            {loading ? 'Refreshing...' : 'Refresh'}
          </button>
          {enableExport && (
            <button
              onClick={exportToCSV}
              disabled={loading || !isDataLoaded}
              className={`px-4 py-2 rounded transition-colors ${
                loading || !isDataLoaded ? 'bg-gray-300 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600 text-white'
              }`}
            >
              Export to CSV
            </button>
          )}
        </div>
      </div>

      <div className={`${gridTheme} relative`} style={{ height: gridHeight, width: gridWidth }}>
        <AgGridReact
          ref={gridRef}
          columnDefs={processedColumnDefs}
          rowModelType={serverSide ? "infinite" : "clientSide"}
          onGridReady={handleGridReady}
          onPaginationChanged={onPaginationChanged}
          cacheBlockSize={currentPageSizeRef.current}
          pagination
          paginationPageSize={currentPageSizeRef.current}
          defaultColDef={mergedDefaultColDef}
          enableCellTextSelection
          copyHeadersToClipboard
          suppressAggFuncInHeader
          loadingOverlayComponent={LoadingOverlay}
          noRowsOverlayComponent={NoRowsOverlay}
          {...customGridOptions}
        />
      </div>
    </div>
  );
};

export default GenericTable12;


const ParentComponent = () => {
  const tableRef = useRef();

  const handleSomeEvent = () => {
    // Refresh the table data
    tableRef.current?.refreshData();
  };

  return (
    <div>
      <button onClick={handleSomeEvent}>
        Refresh Table Data
      </button>
      
      <GenericTable12
        ref={tableRef}
        apiUrl="/api/data"
        serverSide={true}
        // ... other props
      />
    </div>
  );
};
import React, { useState, useCallback, useRef, useMemo, forwardRef, useImperativeHandle, useEffect } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';

// Note the use of forwardRef here
const GenericTable13 = forwardRef((props, ref) => {
  const {
    columnDefs,
    rowData = [],
    paginationPageSize = 20,
    serverSide = false,
    apiUrl = '',
    fetchDataParams = {},
    onGridReady = () => {},
    onError = () => {},
    gridTheme = 'ag-theme-alpine',
    gridHeight = '500px',
    gridWidth = '100%',
    customLoadingOverlay,
    axiosConfig = {},
    defaultColDef = {},
    enableExport = false,
    noRowsMessage = 'No rows to show',
    loadingMessage = 'Loading data...',
    customGridOptions = {},
    onDataLoaded = () => {},
  } = props;

  const gridRef = useRef(null);
  const totalRowsRef = useRef(0);
  const currentPageSizeRef = useRef(paginationPageSize);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isDataLoaded, setIsDataLoaded] = useState(false);

  // Handle API errors
  const handleError = useCallback((err) => {
    const errorMessage = err?.response?.data?.message || err.message || 'An error occurred';
    setError({ message: errorMessage, timestamp: new Date() });
    onError(err);
    setLoading(false);
  }, [onError]);

  // Create data source
  const createDataSource = useCallback((pageSize) => {
    return {
      getRows: async (params) => {
        if (!apiUrl) {
          params.failCallback();
          return;
        }

        setLoading(true);
        setIsDataLoaded(false);

        try {
          const response = await axios.get(apiUrl, {
            params: {
              page: params.startRow / pageSize,
              size: pageSize,
              sort: params.sortModel?.[0]?.sort,
              sortField: params.sortModel?.[0]?.colId,
              ...fetchDataParams
            },
            ...axiosConfig
          });

          const { content, totalElements } = response.data;
          totalRowsRef.current = totalElements;

          if (Array.isArray(content)) {
            setIsDataLoaded(true);
            params.successCallback(content, totalElements);
            onDataLoaded(content);
          } else {
            throw new Error('Invalid data format received from server');
          }
        } catch (err) {
          handleError(err);
          params.failCallback();
        } finally {
          setLoading(false);
        }
      }
    };
  }, [apiUrl, fetchDataParams, axiosConfig, handleError, onDataLoaded]);

  // Refresh data function
  const refreshData = useCallback(async () => {
    if (!gridRef.current?.api || loading) return;

    setLoading(true);
    
    try {
      if (serverSide) {
        const currentPage = gridRef.current.api.paginationGetCurrentPage();
        const dataSource = createDataSource(currentPageSizeRef.current);
        
        await new Promise((resolve, reject) => {
          dataSource.getRows({
            startRow: currentPage * currentPageSizeRef.current,
            successCallback: (rows, totalRows) => {
              gridRef.current.api.setRowData(rows);
              totalRowsRef.current = totalRows;
              setIsDataLoaded(true);
              onDataLoaded(rows);
              resolve();
            },
            failCallback: reject,
          });
        });
      } else {
        const response = await axios.get(apiUrl, {
          params: fetchDataParams,
          ...axiosConfig
        });
        
        const newData = response.data.content || response.data;
        gridRef.current.api.setRowData(newData);
        totalRowsRef.current = newData.length;
        setIsDataLoaded(true);
        onDataLoaded(newData);
      }
    } catch (err) {
      handleError(err);
    } finally {
      setLoading(false);
    }
  }, [serverSide, apiUrl, fetchDataParams, axiosConfig, loading, handleError, onDataLoaded, createDataSource]);

  // Expose methods via ref
  useImperativeHandle(ref, () => ({
    refreshData,
    getGridApi: () => gridRef.current?.api,
    isLoading: () => loading
  }), [refreshData, loading]);

  // Handle grid ready
  const handleGridReady = useCallback((params) => {
    if (serverSide) {
      params.api.setGridOption('datasource', createDataSource(currentPageSizeRef.current));
    }
    onGridReady(params);
  }, [serverSide, createDataSource, onGridReady]);

  // Default column definitions
  const defaultColDefMemo = useMemo(() => ({
    sortable: true,
    filter: true,
    resizable: true,
    ...defaultColDef
  }), [defaultColDef]);

  return (
    <div className="flex flex-col gap-4">
      <div className={`${gridTheme}`} style={{ height: gridHeight, width: gridWidth }}>
        <AgGridReact
          ref={gridRef}
          columnDefs={columnDefs}
          defaultColDef={defaultColDefMemo}
          rowModelType={serverSide ? "infinite" : "clientSide"}
          pagination={true}
          paginationPageSize={paginationPageSize}
          onGridReady={handleGridReady}
          rowData={!serverSide ? rowData : undefined}
          cacheBlockSize={paginationPageSize}
          {...customGridOptions}
        />
      </div>
    </div>
  );
});

// Add display name for better debugging
GenericTable13.displayName = 'GenericTable13';

export default GenericTable13;



import React, { useState, useCallback, useRef, useMemo, useEffect, useImperativeHandle, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';

const GenericTable13 = forwardRef(({
  columnDefs,
  rowData = [],
  paginationPageSize = 20,
  serverSide = false,
  apiUrl = '',
  fetchDataParams = {},
  onGridReady = () => {},
  onError = () => {},
  gridTheme = 'ag-theme-alpine',
  gridHeight = '500px',
  gridWidth = '100%',
  customLoadingOverlay,
  axiosConfig = {},
  defaultColDef = {},
  enableExport = false,
  noRowsMessage = 'No rows to show',
  loadingMessage = 'Loading data...',
  customGridOptions = {},
  onDataLoaded = () => {},
  autoRefreshInterval = 0,
}, ref) =>  {
  const gridRef = useRef(null);
  const totalRowsRef = useRef(0);
  const currentPageSizeRef = useRef(paginationPageSize);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isDataLoaded, setIsDataLoaded] = useState(false);
  const autoRefreshIntervalRef = useRef(null);

  // Handle API errors
  const handleError = useCallback((err) => {
    const errorMessage = err?.response?.data?.message || err.message || 'An error occurred';
    setError({ message: errorMessage, timestamp: new Date() });
    onError(err);
    setLoading(false);
  }, [onError]);

  useImperativeHandle(ref, () => ({
    refreshData
  }));
  // Default column definitions
  const mergedDefaultColDef = useMemo(() => ({
    sortable: true,
    filter: true,
    resizable: true,
    minWidth: 100,
    ...defaultColDef
  }), [defaultColDef]);

  // Wrap cell renderers for loading state
  const wrapCellRenderer = useCallback((renderer) => {
    return (params) => {
      if (!params.data || loading) {
        return <div className="animate-pulse bg-gray-200 h-4 w-full rounded"></div>;
      }
      if (!isDataLoaded) {
        return '';
      }
      return renderer(params);
    };
  }, [isDataLoaded, loading]);

  // Process column definitions
  const processedColumnDefs = useMemo(() => {
    return columnDefs.map(colDef => ({
      ...colDef,
      cellRenderer: colDef.cellRenderer ? wrapCellRenderer(colDef.cellRenderer) : undefined,
      sortable: !loading && colDef.sortable,
      filter: !loading && colDef.filter
    }));
  }, [columnDefs, wrapCellRenderer, loading]);

  // Create data source (memoized)
  const createDataSource = useCallback((pageSize) => {
    return {
      getRows: async (params) => {
        if (!apiUrl) {
          params.failCallback();
          return;
        }

        setLoading(true);
        setIsDataLoaded(false);

        try {
          const response = await axios.get(apiUrl, {
            params: {
              page: params.startRow / pageSize,
              size: pageSize,
              sort: params.sortModel?.[0]?.sort,
              sortField: params.sortModel?.[0]?.colId,
              ...fetchDataParams
            },
            ...axiosConfig
          });

          const { content, totalElements } = response.data;
          totalRowsRef.current = totalElements;

          if (Array.isArray(content)) {
            setIsDataLoaded(true);
            params.successCallback(content, totalElements);
            onDataLoaded(content);
          } else {
            throw new Error('Invalid data format received from server');
          }
        } catch (err) {
          handleError(err);
          params.failCallback();
        } finally {
          setLoading(false);
        }
      }
    };
  }, [apiUrl, fetchDataParams, axiosConfig, handleError, onDataLoaded]);

  // Handle grid ready event
  const handleGridReady = useCallback((params) => {
    try {
      if (serverSide) {
        params.api.setGridOption('datasource', createDataSource(currentPageSizeRef.current));
      } else {
        params.api.setGridOption('rowData', rowData);
        totalRowsRef.current = rowData.length;
        setIsDataLoaded(true);
        onDataLoaded(rowData);
      }

      params.api.sizeColumnsToFit();
      onGridReady(params);
    } catch (err) {
      handleError(err);
    }
  }, [serverSide, rowData, createDataSource, onGridReady, handleError, onDataLoaded]);

  // Handle page size change
  const onPaginationChanged = useCallback((params) => {
    if (!gridRef.current?.api) return;

    const newPageSize = params.api.paginationGetPageSize();
    if (newPageSize !== currentPageSizeRef.current) {
      currentPageSizeRef.current = newPageSize;

      if (serverSide) {
        params.api.setGridOption('datasource', createDataSource(newPageSize));
      }
    }
  }, [serverSide, createDataSource]);

  // Export to CSV
  const exportToCSV = useCallback(() => {
    if (!gridRef.current?.api) return;
    try {
      gridRef.current.api.exportDataAsCsv({
        skipHeader: false,
        skipFooters: true,
        skipGroups: true,
        fileName: `export-${new Date().toISOString()}.csv`
      });
    } catch (err) {
      handleError(err);
    }
  }, [handleError]);

  // Loading and no rows overlay components
  const LoadingOverlay = () => (
    customLoadingOverlay || (
      <div className="flex items-center justify-center p-4">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mb-2"></div>
          <div>{loadingMessage}</div>
        </div>
      </div>
    )
  );

  const NoRowsOverlay = () => (
    <div className="flex items-center justify-center p-4">
      <div className="text-center text-gray-500">
        {error ? error.message : noRowsMessage}
      </div>
    </div>
  );

  const refreshData = useCallback(async () => {
    if (!gridRef.current?.api || loading) return;

    setLoading(true);
    
    try {
      if (serverSide) {
        // For server-side, refresh current page
        const currentPage = gridRef.current.api.paginationGetCurrentPage();
        const dataSource = createDataSource(currentPageSizeRef.current);
        
        await new Promise((resolve, reject) => {
          dataSource.getRows({
            startRow: currentPage * currentPageSizeRef.current,
            successCallback: (rows, totalRows) => {
              gridRef.current.api.setRowData(rows);
              totalRowsRef.current = totalRows;
              setIsDataLoaded(true);
              onDataLoaded(rows);
              resolve();
            },
            failCallback: reject,
          });
        });
      } else {
        // For client-side, fetch all data
        const response = await axios.get(apiUrl, {
          params: fetchDataParams,
          ...axiosConfig
        });
        
        const newData = response.data.content || response.data;
        gridRef.current.api.setRowData(newData);
        totalRowsRef.current = newData.length;
        setIsDataLoaded(true);
        onDataLoaded(newData);
      }
    } catch (err) {
      handleError(err);
    } finally {
      setLoading(false);
    }
  }, [serverSide, apiUrl, fetchDataParams, axiosConfig, loading, handleError, onDataLoaded, createDataSource]);

  // Setup auto-refresh
  useEffect(() => {
    if (autoRefreshInterval > 0) {
      autoRefreshIntervalRef.current = setInterval(refreshData, autoRefreshInterval);
    }
    
    return () => {
      if (autoRefreshIntervalRef.current) {
        clearInterval(autoRefreshIntervalRef.current);
      }
    };
  }, [autoRefreshInterval, refreshData]);

  return (
    <div className="flex flex-col gap-4">
      {enableExport && (
        <div className="flex justify-between items-center">
          <div className="text-sm text-gray-500">
            {loading ? 'Loading...' : `Total rows: ${totalRowsRef.current}`}
          </div>
          <button
            onClick={exportToCSV}
            disabled={loading || !isDataLoaded}
            className={`px-4 py-2 rounded transition-colors ${
              loading || !isDataLoaded ? 'bg-gray-300 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600 text-white'
            }`}
          >
            Export to CSV
          </button>
        </div>
      )}

      <div className={`${gridTheme} relative`} style={{ height: gridHeight, width: gridWidth }}>
        <AgGridReact
          ref={gridRef}
          columnDefs={processedColumnDefs}
          rowModelType={serverSide ? "infinite" : "clientSide"}
          onGridReady={handleGridReady}
          onPaginationChanged={onPaginationChanged}
          cacheBlockSize={currentPageSizeRef.current}
          pagination
          paginationPageSize={currentPageSizeRef.current}
          defaultColDef={mergedDefaultColDef}
          enableCellTextSelection
          copyHeadersToClipboard
          suppressAggFuncInHeader
          loadingOverlayComponent={LoadingOverlay}
          noRowsOverlayComponent={NoRowsOverlay}
          {...customGridOptions}
        />
      </div>
    </div>
  );
});

GenericTable13.displayName = 'GenericTable13';

export default GenericTable13;





import React, { useState, useCallback, useRef, useMemo, useEffect, forwardRef, useImperativeHandle } from 'react';
import PropTypes from 'prop-types';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';

const GenericTable13 = forwardRef(({
  columnDefs,
  rowData = [],
  paginationPageSize = 20,
  serverSide = false,
  apiUrl = '',
  fetchDataParams = {},
  onGridReady = () => {},
  onError = () => {},
  gridTheme = 'ag-theme-alpine',
  gridHeight = '500px',
  gridWidth = '100%',
  customLoadingOverlay,
  axiosConfig = {},
  defaultColDef = {},
  enableExport = false,
  noRowsMessage = 'No rows to show',
  loadingMessage = 'Loading data...',
  customGridOptions = {},
  onDataLoaded = () => {},
  autoRefreshInterval = 0,
}, ref) => {
  const gridRef = useRef(null);
  const totalRowsRef = useRef(0);
  const currentPageSizeRef = useRef(paginationPageSize);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isDataLoaded, setIsDataLoaded] = useState(false);
  const autoRefreshIntervalRef = useRef(null);

  const handleError = useCallback((err) => {
    let errorMessage = 'An error occurred';
    
    try {
      if (err?.response?.data?.message) {
        errorMessage = err.response.data.message;
      } else if (err?.message) {
        errorMessage = err.message;
      }
    } catch (e) {
      console.error('Error while processing error message:', e);
    }

    setError({ message: errorMessage, timestamp: new Date() });
    onError(err);
    setLoading(false);
  }, [onError]);

  const fetchServerSideData = async (currentPage, pageSize) => {
    const response = await axios.get(apiUrl, {
      params: {
        page: currentPage,
        size: pageSize,
        ...fetchDataParams
      },
      ...axiosConfig
    });

    return response.data;
  };

  const refreshData = useCallback(async () => {
    if (!gridRef.current?.api || loading || !apiUrl) return;

    setLoading(true);
    setError(null);

    try {
      if (serverSide) {
        const currentPage = gridRef.current.api.paginationGetCurrentPage();
        const response = await fetchServerSideData(currentPage, currentPageSizeRef.current);
        
        if (gridRef.current?.api) {
          const content = Array.isArray(response.content) ? response.content : response;
          const totalElements = response.totalElements || content.length;
          
          gridRef.current.api.setRowData(content);
          totalRowsRef.current = totalElements;
          setIsDataLoaded(true);
          onDataLoaded(content);
        }
      } else {
        const response = await axios.get(apiUrl, {
          params: fetchDataParams,
          ...axiosConfig
        });
        
        if (gridRef.current?.api) {
          const newData = response.data.content || response.data;
          gridRef.current.api.setRowData(newData);
          totalRowsRef.current = newData.length;
          setIsDataLoaded(true);
          onDataLoaded(newData);
        }
      }
    } catch (err) {
      handleError(err);
    } finally {
      setLoading(false);
    }
  }, [serverSide, apiUrl, fetchDataParams, axiosConfig, loading, handleError, onDataLoaded]);

  useImperativeHandle(ref, () => ({
    refreshData: async () => {
      try {
        await refreshData();
      } catch (err) {
        handleError(err);
      }
    }
  }));

  const handleGridReady = useCallback(async (params) => {
    try {
      if (serverSide) {
        const response = await fetchServerSideData(0, currentPageSizeRef.current);
        const content = Array.isArray(response.content) ? response.content : response;
        const totalElements = response.totalElements || content.length;
        
        params.api.setRowData(content);
        totalRowsRef.current = totalElements;
        setIsDataLoaded(true);
        onDataLoaded(content);
      } else {
        params.api.setRowData(rowData);
        totalRowsRef.current = rowData.length;
        setIsDataLoaded(true);
        onDataLoaded(rowData);
      }

      params.api.sizeColumnsToFit();
      onGridReady(params);
    } catch (err) {
      handleError(err);
    }
  }, [serverSide, rowData, onGridReady, handleError, onDataLoaded]);

  useEffect(() => {
    if (autoRefreshInterval > 0) {
      autoRefreshIntervalRef.current = setInterval(refreshData, autoRefreshInterval);
    }
    
    return () => {
      if (autoRefreshIntervalRef.current) {
        clearInterval(autoRefreshIntervalRef.current);
      }
    };
  }, [autoRefreshInterval, refreshData]);

  return (
    <div className="flex flex-col gap-4">
      <div className={`${gridTheme} relative`} style={{ height: gridHeight, width: gridWidth }}>
        <AgGridReact
          ref={gridRef}
          columnDefs={columnDefs}
          rowModelType={serverSide ? "infinite" : "clientSide"}
          onGridReady={handleGridReady}
          cacheBlockSize={currentPageSizeRef.current}
          pagination
          paginationPageSize={currentPageSizeRef.current}
          defaultColDef={defaultColDef}
          enableCellTextSelection
          copyHeadersToClipboard
          suppressAggFuncInHeader
          {...customGridOptions}
        />
      </div>
    </div>
  );
});

GenericTable13.displayName = 'GenericTable13';

export default GenericTable13;

