import React, { useState, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import axios from 'axios';

const GenericTable2 = ({
  columnDefs = [],
  rowData = [],
  paginationPageSize = 20,
  serverSide = false,
  apiUrl = '',
  fetchDataParams = {},
  onGridReady = () => {},
}) => {
  const [gridApi, setGridApi] = useState(null);
  const [gridColumnApi, setGridColumnApi] = useState(null);

  // Server-side data fetching logic (if needed)
  const fetchServerData = async (params) => {
    if (!apiUrl) return;
    try {
      const response = await axios.get(apiUrl, {
        params: {
          page: params.start / params.end + 1,  // Page number for pagination
          pageSize: params.end - params.start,  // Page size
          ...fetchDataParams,
          sortBy: params.sortModel.length > 0 ? params.sortModel[0].colId : '',
          sortOrder: params.sortModel.length > 0 ? params.sortModel[0].sort : '',
          filter: params.filterModel
        }
      });
      const { data, totalCount } = response.data;  // Assuming API returns this structure
      params.successCallback(data, totalCount);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    if (serverSide && gridApi) {
      gridApi.setDatasource({
        getRows: (params) => fetchServerData(params),
      });
    }
  }, [serverSide, gridApi]);

  const onGridReadyHandler = (params) => {
    setGridApi(params.api);
    setGridColumnApi(params.columnApi);
    onGridReady(params);
  };

  // New callback for handling clipboard operations
  const onCellValueChanged = useCallback((params) => {
    if (params.newValue !== params.oldValue) {
      console.log(`Cell value changed from ${params.oldValue} to ${params.newValue}`);
    }
    // Here you can handle any logic for when a cell value changes, if needed for clipboard operations
  }, []);

  return (
    <div className="ag-theme-alpine" style={{ height: '400px', width: '100%' }}>
      <AgGridReact
        onGridReady={onGridReadyHandler}
        columnDefs={columnDefs}
        rowData={rowData}
        paginationPageSize={paginationPageSize}
        pagination={true}
        enableSorting={true}
        enableFilter={true}
        domLayout="autoHeight"
        rowModelType={serverSide ? 'serverSide' : 'clientSide'}
        cellSelection={true}
        enableCellTextSelection={true}  // Enable text selection in cells
        processCellForClipboard={useCallback(params => params.value, [])}  // Return raw value for clipboard
        processHeaderForClipboard={useCallback(params => params.column.getColDef().headerName, [])}
        processGroupHeaderForClipboard={useCallback(params => params.columnGroup.getColGroupDef().headerName, [])}
        onCellValueChanged={onCellValueChanged}  // Added for potential clipboard operations
      />
    </div>
  );
};

// Prop validation with PropTypes
GenericTable2.propTypes = {
  columnDefs: PropTypes.array.isRequired,
  rowData: PropTypes.array.isRequired,
  paginationPageSize: PropTypes.number,
  serverSide: PropTypes.bool,
  apiUrl: PropTypes.string,
  fetchDataParams: PropTypes.object,
  onGridReady: PropTypes.func,
};

export default GenericTable2;



import React from 'react';

function validateUniqueEntityNames(existingData, newData) {
  // Merge both arrays into one
  const allEntities = [...existingData, ...newData];

  // Use an object to track names (case-insensitive)
  const nameMap = {};

  // Check for duplicates in the merged array
  for (const entity of allEntities) {
    const lowercaseName = entity.name.toLowerCase();
    if (nameMap[lowercaseName]) {
      return { error: `Duplicate entity name found: ${entity.name}` };
    }
    nameMap[lowercaseName] = true;
  }

  // If we've made it here, all entity names are unique
  return { error: null };
}

function App() {
  const existingEntities = [
    { name: "Entity1", field1: "value1" },
    { name: "Entity2", field1: "value2" }
  ];

  const newEntities = [
    { name: "entity3", field1: "value3" },
    { name: "entity2", field1: "duplicate" } // This should trigger an error due to case insensitivity
  ];

  const result = validateUniqueEntityNames(existingEntities, newEntities);

  return (
    <div>
      {result.error ? (
        <p>Error: {result.error}</p>
      ) : (
        <p>All entity names are unique.</p>
      )}
    </div>
  );
}

export default App;


import React from 'react';
import { uniqBy, every } from 'lodash';

const validateEntityNames = (existingEntities, newEntities) => {
  const allEntities = [...existingEntities, ...newEntities];
  
  // Check if all names are non-empty, non-null, and non-undefined
  if (!every(allEntities, entity => entity.name && typeof entity.name === 'string' && entity.name.trim() !== '')) {
    return { error: "Entity name cannot be empty, null, or undefined." };
  }

  // Check for uniqueness
  const uniqueEntities = uniqBy(allEntities, 'name');
  if (uniqueEntities.length !== allEntities.length) {
    return { error: "Duplicate entity names found." };
  }

  return { error: null }; // All checks passed
};

const ExampleComponent = () => {
  const existingEntities = [
    { name: "Entity1", field1: "value1" },
    { name: "Entity2", field1: "value2" }
  ];

  const newEntities = [
    { name: "Entity3", field1: "value3" },
    { name: "", field1: "duplicate" } // This should trigger an error due to empty name
  ];

  const validationResult = validateEntityNames(existingEntities, newEntities);

  return (
    <div>
      {validationResult.error ? (
        <p>Error: {validationResult.error}</p>
      ) : (
        <p>All entity names are valid and unique.</p>
      )}
    </div>
  );
};

export default ExampleComponent;


import React from 'react';

const validateEntityNames = (existingEntities, newEntities) => {
  const allEntities = [...existingEntities, ...newEntities];

  // Check if all names are non-empty, non-null, and non-undefined
  const allNames = allEntities.map((entity) => entity.name?.trim()).filter(name => name);

  if (allNames.length !== allEntities.length) {
    return { error: "Entity name cannot be empty, null, or undefined." };
  }

  // Convert all names to lowercase and check for uniqueness
  const lowerCaseNames = allNames.map((name) => name.toLowerCase());

  // Use a Set to eliminate duplicates (case-insensitive)
  const uniqueNames = [...new Set(lowerCaseNames)];

  // If the length of uniqueNames is different, it means there are duplicates
  if (uniqueNames.length !== lowerCaseNames.length) {
    return { error: "Duplicate entity names found (case-insensitive)." };
  }

  return { error: null }; // All checks passed
};

const ExampleComponent = () => {
  const existingEntities = [
    { name: "Entity1", field1: "value1" },
    { name: "Entity2", field1: "value2" }
  ];

  const newEntities = [
    { name: "Entity3", field1: "value3" },
    { name: "entity1", field1: "duplicate" }, // This should trigger an error due to case-insensitive duplicate name
    { name: " ", field1: "invalid" } // This should trigger an error due to empty name
  ];

  const validationResult = validateEntityNames(existingEntities, newEntities);

  return (
    <div>
      {validationResult.error ? (
        <p>Error: {validationResult.error}</p>
      ) : (
        <p>All entity names are valid and unique.</p>
      )}
    </div>
  );
};

export default ExampleComponent;



// AttributeForm.js
import React, { useState } from 'react';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import TextField from '@mui/material/TextField';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import InputLabel from '@mui/material/InputLabel';
import Radio from '@mui/material/Radio';
import RadioGroup from '@mui/material/RadioGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormHelperText from '@mui/material/FormHelperText';
import { Button } from '@mui/material';

const AttributeForm = ({ onClose }) => {
  const [formData, setFormData] = useState({
    attributeName: '',
    attributeType: '',
    attributeDefinition: '',
    criticalDataElement: 'no',
    attributeNullable: 'yes'
  });
  const [errors, setErrors] = useState({});

  // Handle form input changes
  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
    setErrors(prevErrors => ({
      ...prevErrors,
      [name]: ''
    }));
  };

  // Form validation
  const validate = () => {
    let tempErrors = {};
    if (!formData.attributeName || formData.attributeName.length < 3) {
      tempErrors.attributeName = 'Attribute Name must be at least 3 characters long.';
    }
    if (!formData.attributeType) {
      tempErrors.attributeType = 'Attribute Type is required.';
    }
    if (!formData.attributeDefinition || formData.attributeDefinition.length < 3) {
      tempErrors.attributeDefinition = 'Attribute Definition must be at least 3 characters long.';
    }
    setErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = (event) => {
    event.preventDefault();
    if (validate()) {
      console.log(formData);
      onClose(); // Close the form after submission
    }
  };

  return (
    <Dialog open={true} onClose={onClose}>
      <DialogTitle>Add Attribute</DialogTitle>
      <DialogContent>
        <form>
          <TextField
            autoFocus
            margin="dense"
            name="attributeName"
            label="Attribute Name"
            type="text"
            fullWidth
            value={formData.attributeName}
            onChange={handleChange}
            error={!!errors.attributeName}
            helperText={errors.attributeName}
          />
          <FormControl fullWidth margin="dense" error={!!errors.attributeType}>
            <InputLabel id="attribute-type-label">Attribute Type</InputLabel>
            <Select
              labelId="attribute-type-label"
              name="attributeType"
              value={formData.attributeType}
              label="Attribute Type"
              onChange={handleChange}
            >
              <MenuItem value="Number">Number</MenuItem>
              <MenuItem value="String">String</MenuItem>
              <MenuItem value="Float">Float</MenuItem>
              <MenuItem value="Boolean">Boolean</MenuItem>
              <MenuItem value="Object">Object</MenuItem>
              <MenuItem value="Array">Array</MenuItem>
            </Select>
            {errors.attributeType && <FormHelperText>{errors.attributeType}</FormHelperText>}
          </FormControl>
          <TextField
            margin="dense"
            name="attributeDefinition"
            label="Attribute Definition"
            type="text"
            fullWidth
            multiline
            rows={4}
            value={formData.attributeDefinition}
            onChange={handleChange}
            error={!!errors.attributeDefinition}
            helperText={errors.attributeDefinition}
          />
          <FormControl component="fieldset" margin="dense">
            <legend>Critical Data Element</legend>
            <RadioGroup row aria-label="criticalDataElement" name="criticalDataElement" value={formData.criticalDataElement} onChange={handleChange}>
              <FormControlLabel value="yes" control={<Radio />} label="Yes" />
              <FormControlLabel value="no" control={<Radio />} label="No" />
            </RadioGroup>
          </FormControl>
          <FormControl component="fieldset" margin="dense">
            <legend>Is Nullable</legend>
            <RadioGroup row aria-label="attributeNullable" name="attributeNullable" value={formData.attributeNullable} onChange={handleChange}>
              <FormControlLabel value="yes" control={<Radio />} label="Yes" />
              <FormControlLabel value="no" control={<Radio />} label="No" />
            </RadioGroup>
          </FormControl>
        </form>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Cancel</Button>
        <Button onClick={handleSubmit}>Submit</Button>
      </DialogActions>
    </Dialog>
  );
};

export default AttributeForm;



function App() {
  const [count, setCount] = useState(0)
  const [openForm, setOpenForm] = useState(false);

  const handleClickOpen = () => {
    setOpenForm(true);
  };

  const handleCloseForm = () => {
    setOpenForm(false);
  };

  return (
    <>
     <Button variant="outlined" onClick={handleClickOpen}>
        Open Form
      </Button>
      {openForm && <AttributeForm onClose={handleCloseForm} />}

      <ParentComponent />
    </>
  )
}



const validateBulkUpload = (files) => {
  let errors = [];

  files.forEach((file, index) => {
    let fileErrors = {};
    
    // Assuming each file contains a JSON object with the same structure as formData
    if (typeof file !== 'object' || file === null) {
      fileErrors.general = 'File content must be a valid JSON object';
    } else {
      // Check each field
      if (!file.attributeName || file.attributeName.length < 3) {
        fileErrors.attributeName = 'Attribute Name must be at least 3 characters long.';
      }
      if (!file.attributeType) {
        fileErrors.attributeType = 'Attribute Type is required.';
      }
      if (!file.attributeDefinition || file.attributeDefinition.length < 3) {
        fileErrors.attributeDefinition = 'Attribute Definition must be at least 3 characters long.';
      }
      if (!['yes', 'no'].includes(file.criticalDataElement)) {
        fileErrors.criticalDataElement = 'Critical Data Element must be either "yes" or "no".';
      }
      if (!['yes', 'no'].includes(file.attributeNullable)) {
        fileErrors.attributeNullable = 'Is Nullable must be either "yes" or "no".';
      }
    }

    if (Object.keys(fileErrors).length > 0) {
      errors.push({ file: index + 1, errors: fileErrors });
    }
  });

  if (errors.length > 0) {
    throw new Error(JSON.stringify(errors, null, 2));
  }

  return true; // All files passed validation
};
